import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage


API_TOKEN = "8246523084:AAHtVhY5SzFIwFe3ltZbj-QUBIIzEqmhaFw"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –¢—É—Ç –±—É–¥–µ–º–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—É —Ñ–æ—Ä–º–∞—Ç—ñ {username: password})
users_db = {}

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
class RegisterState(StatesGroup):
    username = State()
    password = State()

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ –¥–ª—è –ª–æ–≥—ñ–Ω—É
class LoginState(StatesGroup):
    username = State()
    password = State()


# Start command
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! üëã –Ø —Ç–≤—ñ–π Recommendation Assistant.\n"
                         "–ù–∞–¥—ñ—à–ª–∏ /recommend, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥—É."
                         "\n–ù–∞–¥—ñ—à–ª–∏ /register, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è."
                         "\n–ù–∞–¥—ñ—à–ª–∏ /login, —â–æ–± —É–≤—ñ–π—Ç–∏."
                         "\n–ù–∞–¥—ñ—à–ª–∏ /exit, —â–æ–± –≤–∏–π—Ç–∏.")
    
# Exit command
@dp.message(Command("exit"))
async def exit_cmd(message: types.Message):
    # —Ç—É—Ç –º–æ–∂–Ω–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤–æ–Ω–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è
    await message.answer("–í–∏ –≤–∏–π—à–ª–∏. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start.")


# Recommend command
@dp.message(Command("recommend"))
async def recommend_handler(message: Message):
    await message.answer("–¢—É—Ç –∑–≥–æ–¥–æ–º –±—É–¥–µ —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è üé¨üìöüéµ")


# ======================
#       –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø
# ======================
@dp.message(Command("register"))
async def register_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
    await state.set_state(RegisterState.username)

@dp.message(RegisterState.username)
async def register_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")
    await state.set_state(RegisterState.password)

@dp.message(RegisterState.password)
async def register_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = data["username"]
    password = message.text

    if username in users_db:
        await message.answer("–¢–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î!")
    else:
        users_db[username] = password
        await message.answer(f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ /login")

    await state.clear()


# ======================
#         –õ–û–ì–Ü–ù
# ======================
@dp.message(Command("login"))
async def login_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ª–æ–≥—ñ–Ω:")
    await state.set_state(LoginState.username)

@dp.message(LoginState.username)
async def login_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")
    await state.set_state(LoginState.password)

@dp.message(LoginState.password)
async def login_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = data["username"]
    password = message.text

    if username in users_db and users_db[username] == password:
        await message.answer(f"‚úÖ –í—ñ—Ç–∞—é, {username}, –≤–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏!")
    else:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å.")

    await state.clear()

# üîπ –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
